#########################################################################
# Title:            Sandbox: tqm                                        #
# Author(s):        CHAIR/Raneydazed                                    #
# URL:              https://github.com/saltyorg/Sandbox                 #
# --                                                                    #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Check if 'tqm_service' exists
  ansible.builtin.stat:
    path: "{{ tqm_paths_service_location }}"
  register: tqm_service

- name: Stop existing 'tqm_service'
  ansible.builtin.systemd_service:
    state: stopped
    name: tqm.service
  when: tqm_service.stat.exists

- name: Check if 'tqm_timer' exists
  ansible.builtin.stat:
    path: "{{ tqm_paths_timer_location }}"
  register: tqm_timer

- name: Stop existing 'tqm_timer'
  ansible.builtin.systemd_service:
    state: stopped
    name: tqm.timer
  when: tqm_timer.stat.exists

- name: Create directories
  ansible.builtin.include_tasks: "{{ resources_tasks_path }}/directories/create_directories.yml"

- name: Set variable for output of tqm releases
  ansible.builtin.uri:
    url: "{{ svm }}https://api.github.com/repos/autobrr/tqm/releases/latest"
  register: tqm_releases

- name: Get the url for latest amd64 tqm binary archive
  ansible.builtin.set_fact:
    tqm_latest: "{{ tqm_releases.json.assets | selectattr('name', 'search', '_linux_amd64.tar.gz') | map(attribute='browser_download_url') | join('') }}"

- name: Ensure that temp directory does not exist
  ansible.builtin.file:
    path: "/tmp/tqm_extract"
    state: absent

- name: Create temp directory
  ansible.builtin.file:
    path: "/tmp/tqm_extract"
    state: directory
    mode: '0755'

- name: Download tqm archive
  ansible.builtin.get_url:
    url: "{{ tqm_latest }}"
    dest: "/tmp/tqm_extract/tqm_archive.tar.gz"
    mode: "0644"
    force: true

- name: Extract the tar.gz file
  ansible.builtin.unarchive:
    src: "/tmp/tqm_extract/tqm_archive.tar.gz"
    dest: "/tmp/tqm_extract/"
    remote_src: yes

- name: Copy tqm binary to destination
  ansible.builtin.copy:
    src: "/tmp/tqm_extract/tqm"
    dest: "{{ tqm_paths_location }}/tqm"
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: "0775"
    remote_src: yes

- name: Clean up temporary files
  ansible.builtin.file:
    path: "/tmp/tqm_extract"
    state: absent

- name: Check if `{{ tqm_paths_config_location | basename }}` exists
  ansible.builtin.stat:
    path: "{{ tqm_paths_config_location }}"
  register: tqm_config

- name: "Fail when 'config.yml' is not present"
  ansible.builtin.fail:
    msg: "You need to setup your config file. https://docs.saltbox.dev/sandbox/apps/tqm/"
  when: (not tqm_config.stat.exists) and (not continuous_integration)

- name: Fail if 'download_client' has not been set
  ansible.builtin.fail:
    msg: "You need to edit 'tqm.download_client' in the settings.yml. Options are deluge and qbt"
  when: (tqm.download_client | default("client") | ternary('true', 'false') == 'false') and not continuous_integration

- name: Import 'tqm_service'
  ansible.builtin.template:
    src: tqm.service.j2
    dest: "{{ tqm_paths_service_location }}"
    mode: "0664"
    force: true

- name: Load 'tqm_service'
  ansible.builtin.systemd_service:
    name: tqm.service
    state: started
    enabled: yes
    daemon_reload: true
  when: not continuous_integration

- name: Import 'tqm_timer'
  ansible.builtin.template:
    src: tqm.timer.j2
    dest: "{{ tqm_paths_timer_location }}"
    mode: "0664"
    force: true

- name: Load 'tqm_timer'
  ansible.builtin.systemd_service:
    name: tqm.timer
    state: started
    enabled: yes
    daemon_reload: true
  when: not continuous_integration
