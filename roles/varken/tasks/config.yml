#########################################################################
# Title:            Sandbox: Varken Role                                #
# Author(s):        desimaniac, salty                                   #
# URL:              https://github.com/saltyorg/Sandbox                 #
# --                                                                    #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
# Get Public IP Address
- name: Get IP Address
  community.general.ipinfoio_facts:

# Tautulli Tasks
- name: "Check if tautulli exists"
  ansible.builtin.stat:
    path: "{{ lookup('role_var', '_tautulli_config', role='varken') }}"
  register: varken_tautulli_config_stat

# Sonarr Tasks
- name: "Check if sonarr exists"
  ansible.builtin.stat:
    path: "{{ lookup('role_var', '_sonarr_config', role='varken') }}"
  register: varken_sonarr_config_stat

- name: Pull sonarr api key
  community.general.xml:
    path: "{{ lookup('role_var', '_sonarr_config', role='varken') }}"
    xpath: /Config/ApiKey
    content: text
  register: xmlresp
  when: varken_sonarr_config_stat.stat.exists

- name: Set 'sonarr_api_key'
  ansible.builtin.set_fact:
    sonarr_api_key: "{{ xmlresp.matches[0].ApiKey
                     if varken_sonarr_config_stat.stat.exists
                     else '' }}"

# Radarr Tasks
- name: "Check if radarr exists"
  ansible.builtin.stat:
    path: "{{ lookup('role_var', '_radarr_config', role='varken') }}"
  register: varken_radarr_config_stat

- name: Pull radarr api key
  community.general.xml:
    path: "{{ lookup('role_var', '_radarr_config', role='varken') }}"
    xpath: /Config/ApiKey
    content: text
  register: xmlresp
  when: varken_radarr_config_stat.stat.exists

- name: Set 'radarr_api_key'
  ansible.builtin.set_fact:
    radarr_api_key: "{{ xmlresp.matches[0].ApiKey
                     if varken_radarr_config_stat.stat.exists
                     else '' }}"

# Ombi Tasks
- name: "Check if ombi exists"
  ansible.builtin.stat:
    path: "{{ lookup('role_var', '_ombi_db', role='varken') }}"
  register: varken_ombi_config_stat

- name: Get Ombi API key
  ansible.builtin.shell: sqlite3 "{{ lookup('role_var', '_ombi_db', role='varken') }}" "SELECT Content,SettingsName FROM GlobalSettings WHERE SettingsName = 'OmbiSettings';" | sed 's/|[^|]*$//' | jq -r .ApiKey  # noqa 204 jinja[invalid]
  register: ombi_api_key
  when: varken_ombi_config_stat.stat.exists

- name: Set 'ombi_api_key'
  ansible.builtin.set_fact:
    ombi_api_key: "{{ ombi_api_key.stdout
                   if varken_ombi_config_stat.stat.exists
                   else '' }}"

- name: Import 'config.ini'
  ansible.builtin.template:
    src: varken.ini.j2
    dest: "{{ server_appdata_path }}/varken/varken.ini"
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: "0664"
    force: true
