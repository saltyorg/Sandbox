#########################################################################
# Title:            Sandbox: SARotate                                   #
# Author(s):        hackmonker                                          #
# URL:              https://github.com/saltyorg/Sandbox                 #
# --                                                                    #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---

- name: Check if sarotate service exists
  ansible.builtin.stat:
    path: "{{ sarotate_paths_service_file_location }}"
  register: sarotate_service

- name: Stop existing sarotate service
  ansible.builtin.systemd:
    state: stopped
    name: sarotate
  when: sarotate_service.stat.exists

- name: Check if rclone mount service exists
  ansible.builtin.stat:
    path: "{{ rclone_mount_service_file_location }}"
  register: mount_service

- name: "Fail when rclone service is `not found`"
  fail:
    msg: "You need to have a rclone mount running for sarotate to work."
  when: (not mount_service.stat.exists) and (not continuous_integration)

- name: Create directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: "0775"
  with_items: "{{ lookup('vars', role_name + '_paths_folders_list') }}"

- name: Download sarotate binary for linux x64
  block:

    - name: Set variable for output of sarotate releases
      uri:
        url: https://api.github.com/repos/saltydk/sarotate/releases/latest
      register: sarotate_releases
    
    - name: Get the url for latest x64 sarotate binary
      set_fact:
        sarotate_latest: "{{ sarotate_releases.json.assets | selectattr('name', '==', 'SARotate-linux-x64') | map(attribute='browser_download_url') | join('') }}"

    - name: Download sarotate binary
      get_url:
        url: "{{ sarotate_latest }}"
        dest: "{{ sarotate_paths_location }}/SARotate"

- name: Make sarotate binary executable
  file:
    dest: "{{ sarotate_paths_location }}/SARotate"
    mode: a+x

- name: Check if `{{ sarotate_paths_config_location | basename }}` exists
  stat:
    path: "{{ sarotate_paths_config_location }}"
  register: sarotate_config

- name: "Fail when remotes are `not added`"
  fail:
    msg: "You need to add remotes you wish to rotate the service accounts for in the settings file."
  when: (not sarotate_config.stat.exists) and ("" in sarotate.remotes) and (not continuous_integration)

- name: "Fail when sa folder path are `not added`"
  fail:
    msg: "You need to add the path to the folder containing your service accounts files in the settings file."
  when: (not sarotate_config.stat.exists) and (sarotate.sa_path == "your_sa_folder_path") and (not continuous_integration)

- name: New `{{ sarotate_paths_config_location | basename }}` tasks 
  block:
    
    - name: Import Settings task
      import_tasks: "subtasks/config.yml"

    - name: Import default config    
      template:
        src: config.yaml.j2
        dest: "{{ sarotate_paths_config_location }}"
        owner: "{{ user.name }}"
        group: "{{ user.name }}"
        mode: 0775

  when: (not sarotate_config.stat.exists) and (not continuous_integration)

- name: Import sarotate service
  template:
    src: sarotate.service.j2
    dest: "{{ sarotate_paths_service_file_location }}"
    mode: "0664"
    force: true
  when: not sarotate_service.stat.exists

- name: Load sarotate service
  systemd:
    name: sarotate
    state: started
    enabled: yes
    daemon_reload: true
