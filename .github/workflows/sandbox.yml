name: CI

on:
  push:
    paths-ignore:
      - '.github/**'
      - '*.md'
      - '.gitignore'
      - 'roles/settings/**'
    branches-ignore:
      - 'dependabot/**'
  pull_request:
    paths-ignore:
      - '*.md'
      - '.gitignore'
      - 'roles/settings/**'
  workflow_dispatch:

jobs:
  ansible-lint:
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.actor != 'renovate[bot]')
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v6
        with:
          python-version: '3.13'
          cache: 'pip'
          cache-dependency-path: 'requirements/requirements-lint.txt'

      - name: Install packages
        run: pip install -r ./requirements/requirements-lint.txt

      - name: Run ansible linter
        working-directory: ${{ github.workspace }}
        run: ansible-lint

      - name: Run salty linter
        run: python3 ./scripts/salty-linter.py ./roles

  check-entries:
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.actor != 'renovate[bot]')
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5

      - name: Check Missing Entries
        run: ./scripts/check_missing_entries.sh

  find-roles:
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.actor != 'renovate[bot]')
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v5
      - id: set-matrix
        run: echo "matrix={\"roles\":[$(awk '/# Apps Start/{flag=1;next}/# Apps End/{flag=0}flag' sandbox.yml | awk '!/#/' | awk -F'[][]' '{print $2}' | tr '\n' ',' | sed 's/,*$//' | awk -F',' '{ for( i=1; i<=NF; i++ ) print $i }' | awk '{ gsub(/ /,""); print }'| sort -u | awk -vORS=, '{ print $1 }' | sed 's/,$/\n/')]}" >> $GITHUB_OUTPUT

  install:
    name: '${{ matrix.roles }}'
    needs: [ansible-lint, check-entries, find-roles]
    runs-on: ubuntu-24.04
    strategy:
      matrix: ${{ fromJson(needs.find-roles.outputs.matrix) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v5

      - name: Install Dependencies
        run: curl https://raw.githubusercontent.com/saltyorg/sb/master/sb_install.sh --output sb_install.sh && sudo bash sb_install.sh -v && ansible --version

      - name: Chown /srv/git
        run: sudo chown -R runner:runner /srv/git

      - name: Print pip dependencies
        run: cat /srv/git/sb/requirements-saltbox.txt

      - name: Edit accounts.yml
        run: cd /srv/git/saltbox && sed -i 's/seed/runner/g' accounts.yml

      - name: Create, chown and chmod /tmp/ansible
        run: sudo mkdir /tmp/ansible && sudo chown -R runner:runner /tmp/ansible && chmod 0777 /tmp/ansible

      - name: Syntax Check
        run: cd /srv/git/saltbox && sudo ansible-playbook saltbox.yml --syntax-check

      - name: Create CI vars file
        if: github.repository == 'saltyorg/Sandbox' && github.event.repository.fork == false
        run: |
          echo "continuous_integration: true" > /tmp/vars.yml
          echo "dockerhub:" >> /tmp/vars.yml
          echo "  token: ${{ secrets.DOCKERHUB_TOKEN }}" >> /tmp/vars.yml
          echo "  user: ${{ secrets.DOCKERHUB_USERNAME }}" >> /tmp/vars.yml

      - name: Install Saltbox Core
        run: cd /srv/git/saltbox && sudo ansible-playbook saltbox.yml --tags "core" --skip-tags "settings" --extra-vars "@/tmp/vars.yml"

      - name: Copy default configuration
        run: cp -n defaults/ansible.cfg.default ansible.cfg && cp -n defaults/settings.yml.default settings.yml

      - name: Install ${{ matrix.roles }}
        run: sudo ansible-playbook sandbox.yml --tags "${{ matrix.roles }}" --skip-tags "settings" --extra-vars "@/tmp/vars.yml"

      - name: Inspect all Docker containers
        run: |
          echo "=== Inspecting all Docker containers ==="

          # Get list of all containers (running and stopped)
          ALL_CONTAINERS=$(docker ps -a -q)

          if [ -z "$ALL_CONTAINERS" ]; then
            echo "No containers found on this system"
            exit 0
          fi

          echo "Found containers: $ALL_CONTAINERS"
          echo ""

          # Loop through each container and inspect it
          for container_id in $ALL_CONTAINERS; do
            echo "========================================="
            echo "Inspecting container: $container_id"
            echo "========================================="

            # Get container name and status for better readability
            CONTAINER_NAME=$(docker inspect --format='{{.Name}}' $container_id | sed 's/^\///')
            CONTAINER_STATUS=$(docker inspect --format='{{.State.Status}}' $container_id)

            echo "Container Name: $CONTAINER_NAME"
            echo "Container Status: $CONTAINER_STATUS"
            echo ""
            echo "Full inspection details:"
            echo "----------------------------------------"

            # Print full inspection details
            docker inspect $container_id

            echo ""
            echo "========================================="
            echo ""
          done

          echo "=== Container inspection completed ==="
