name: CI - Every OS

on:
  workflow_dispatch:

jobs:
  ansible-lint:
    if: github.event_name == 'pull_request' || !(github.event_name == 'push' && github.actor == 'renovate[bot]')
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5
        with:
          path: sandbox

      - name: Checkout Saltbox repository
        uses: actions/checkout@v5
        with:
          repository: saltyorg/Saltbox
          path: saltbox

      - uses: actions/setup-python@v6
        with:
          python-version: '3.13'
          cache: 'pip'
          cache-dependency-path: 'saltbox/requirements/requirements-saltbox.txt'

      - name: Install packages
        run: pip install -r .saltbox/requirements/requirements-saltbox.txt

      - name: Run ansible linter
        working-directory: ${{ github.workspace }}/sandbox
        run: ansible-lint

  check-entries:
    if: github.event_name == 'pull_request' || !(github.event_name == 'push' && github.actor == 'renovate[bot]')
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5

      - name: Check Missing Entries
        run: ./scripts/check_missing_entries.sh

  find-roles:
    if: github.event_name == 'pull_request' || !(github.event_name == 'push' && github.actor == 'renovate[bot]')
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v5
      - id: set-matrix
        run: |
          ROLES=$(awk '/# Apps Start/{flag=1;next}/# Apps End/{flag=0}flag' sandbox.yml | awk '!/#/' | awk -F'[][]' '{print $2}' | tr '\n' ',' | sed 's/,*$//' | awk -F',' '{ for( i=1; i<=NF; i++ ) print $i }' | awk '{ gsub(/ /,""); print }'| sort -u | awk -vORS=, '{ print $1 }' | sed 's/,$/\n/')
          echo "matrix={\"roles\":[$ROLES],\"os\":[\"22.04\",\"24.04\"]}" >> $GITHUB_OUTPUT

  install:
    name: '${{ matrix.roles }}-${{ matrix.os }}'
    runs-on: ubuntu-${{ matrix.os }}
    needs: [ansible-lint, find-roles]
    strategy:
      matrix: ${{ fromJson(needs.find-roles.outputs.matrix) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v5

      - name: Install sb binary
        uses: jaxxstorm/action-install-gh-release@v2.1.0
        with:
          repo: saltyorg/sb-go
          tag: latest
          extension-matching: disable
          platform: linux
          arch: amd64
          rename-to: sb
          chmod: "0755"

      - name: Check sb version
        run: |
          sudo mv /opt/hostedtoolcache/saltyorg/sb-go/latest/linux-amd64/sb /usr/local/bin/sb
          /usr/local/bin/sb version

      - name: Install Dependencies
        run: /usr/local/bin/sb setup -v -b role-refactor && /srv/ansible/venv/bin/ansible --version # Remove branch flag once we move to master

      - name: Chown /srv/git
        run: sudo chown -R runner:runner /srv/git

      - name: Print pip dependencies
        run: cat /srv/git/saltbox/requirements/requirements-saltbox.txt

      - name: Edit accounts.yml
        run: cd /srv/git/saltbox && sed -i 's/seed/runner/g' accounts.yml

      - name: Syntax Check
        run: cd /srv/git/saltbox && sudo ansible-playbook saltbox.yml --syntax-check

      - name: Create basic vars file
        run: |
          echo "continuous_integration: true" > /tmp/vars.yml
          echo "server_appdata_path: /opt2" >> /tmp/vars.yml
          sudo mkdir -p /opt2

      - name: Create CI vars file
        if: github.repository == 'saltyorg/Sandbox' && github.event.repository.fork == false
        run: |
          echo "dockerhub:" >> /tmp/vars.yml
          echo "  token: ${{ secrets.DOCKERHUB_TOKEN }}" >> /tmp/vars.yml
          echo "  user: ${{ secrets.DOCKERHUB_USERNAME }}" >> /tmp/vars.yml

      - name: Install Saltbox Preinstall
        run: cd /srv/git/saltbox && sudo /srv/ansible/venv/bin/ansible-playbook saltbox.yml --tags "preinstall" --skip-tags "settings" --extra-vars "@/tmp/vars.yml"

      - name: Run saltbox.fact
        run: /srv/git/saltbox/ansible_facts.d/saltbox.fact

      - name: Install Saltbox Core
        run: cd /srv/git/saltbox && sudo ansible-playbook saltbox.yml --tags "core" --skip-tags "settings" --extra-vars "@/tmp/vars.yml"

      - name: Copy default configuration
        run: |
          if touch /tmp/test1 && cp --update=none /tmp/test1 /tmp/test2 2>/dev/null; then
            cp --update=none defaults/ansible.cfg.default ansible.cfg && cp --update=none defaults/settings.yml.default settings.yml
          else
            cp -n defaults/ansible.cfg.default ansible.cfg && cp -n defaults/settings.yml.default settings.yml
          fi

      - name: Install ${{ matrix.roles }}
        run: sudo ansible-playbook sandbox.yml --tags "${{ matrix.roles }}" --skip-tags "settings" --extra-vars "@/tmp/vars.yml"

      - name: Run Tree on app data folder
        run: sudo tree -aug /opt2

      - name: Inspect all Docker containers
        run: |
          echo "=== Inspecting all Docker containers ==="

          # Get list of all containers (running and stopped)
          ALL_CONTAINERS=$(docker ps -a -q)

          if [ -z "$ALL_CONTAINERS" ]; then
            echo "No containers found on this system"
            exit 0
          fi

          echo "Found containers: $ALL_CONTAINERS"
          echo ""

          # Loop through each container and inspect it
          for container_id in $ALL_CONTAINERS; do
            echo "========================================="
            echo "Inspecting container: $container_id"
            echo "========================================="

            # Get container name and status for better readability
            CONTAINER_NAME=$(docker inspect --format='{{.Name}}' $container_id | sed 's/^\///')
            CONTAINER_STATUS=$(docker inspect --format='{{.State.Status}}' $container_id)

            echo "Container Name: $CONTAINER_NAME"
            echo "Container Status: $CONTAINER_STATUS"
            echo ""
            echo "Full inspection details:"
            echo "----------------------------------------"

            # Print full inspection details
            docker inspect $container_id

            echo ""
            echo "========================================="
            echo ""
          done

          echo "=== Container inspection completed ==="
